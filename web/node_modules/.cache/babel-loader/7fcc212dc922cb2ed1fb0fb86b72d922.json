{"remainingRequest":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/babel-loader/lib/index.js!/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vuetify-loader/lib/loader.js!/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/albert/Desktop/AirMashup_GSoC/web/src/components/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/src/components/WorldMap.vue","mtime":1565267952964},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nd3.csv(\"population.csv\", function (err, data) {\n  var config = {\n    \"data0\": \"Country (or dependent territory)\",\n    \"data1\": \"Population\",\n    \"label0\": \"label 0\",\n    \"label1\": \"label 1\",\n    \"color0\": \"#99ccff\",\n    \"color1\": \"#0050A1\",\n    \"width\": 960,\n    \"height\": 960\n  };\n  var width = config.width,\n      height = config.height;\n  var COLOR_COUNTS = 9;\n\n  function Interpolate(start, end, steps, count) {\n    var s = start,\n        e = end,\n        final = s + (e - s) / steps * count;\n    return Math.floor(final);\n  }\n\n  function Color(_r, _g, _b) {\n    var r, g, b;\n\n    var setColors = function setColors(_r, _g, _b) {\n      r = _r;\n      g = _g;\n      b = _b;\n    };\n\n    setColors(_r, _g, _b);\n\n    this.getColors = function () {\n      var colors = {\n        r: r,\n        g: g,\n        b: b\n      };\n      return colors;\n    };\n  }\n\n  function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  function valueFormat(d) {\n    if (d > 1000000000) {\n      return Math.round(d / 1000000000 * 10) / 10 + \"B\";\n    } else if (d > 1000000) {\n      return Math.round(d / 1000000 * 10) / 10 + \"M\";\n    } else if (d > 1000) {\n      return Math.round(d / 1000 * 10) / 10 + \"K\";\n    } else {\n      return d;\n    }\n  }\n\n  var COLOR_FIRST = config.color0,\n      COLOR_LAST = config.color1;\n  var rgb = hexToRgb(COLOR_FIRST);\n  var COLOR_START = new Color(rgb.r, rgb.g, rgb.b);\n  rgb = hexToRgb(COLOR_LAST);\n  var COLOR_END = new Color(rgb.r, rgb.g, rgb.b);\n  var startColors = COLOR_START.getColors(),\n      endColors = COLOR_END.getColors();\n  var colors = [];\n\n  for (var i = 0; i < COLOR_COUNTS; i++) {\n    var r = Interpolate(startColors.r, endColors.r, COLOR_COUNTS, i);\n    var g = Interpolate(startColors.g, endColors.g, COLOR_COUNTS, i);\n    var b = Interpolate(startColors.b, endColors.b, COLOR_COUNTS, i);\n    colors.push(new Color(r, g, b));\n  }\n\n  var MAP_KEY = config.data0;\n  var MAP_VALUE = config.data1;\n  var projection = d3.geo.mercator().scale((width + 1) / 2 / Math.PI).translate([width / 2, height / 2]).precision(.1);\n  var path = d3.geo.path().projection(projection);\n  var graticule = d3.geo.graticule();\n  var svg = d3.select(\"#canvas-svg\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n  svg.append(\"path\").datum(graticule).attr(\"class\", \"graticule\").attr(\"d\", path);\n  var valueHash = {};\n\n  function log10(val) {\n    return Math.log(val);\n  }\n\n  data.forEach(function (d) {\n    valueHash[d[MAP_KEY]] = +d[MAP_VALUE];\n  });\n  var quantize = d3.scale.quantize().domain([0, 1.0]).range(d3.range(COLOR_COUNTS).map(function (i) {\n    return i;\n  }));\n  quantize.domain([d3.min(data, function (d) {\n    return +d[MAP_VALUE];\n  }), d3.max(data, function (d) {\n    return +d[MAP_VALUE];\n  })]);\n  d3.json(\"https://s3-us-west-2.amazonaws.com/vida-public/geo/world-topo-min.json\", function (error, world) {\n    var countries = topojson.feature(world, world.objects.countries).features;\n    svg.append(\"path\").datum(graticule).attr(\"class\", \"choropleth\").attr(\"d\", path);\n    var g = svg.append(\"g\");\n    g.append(\"path\").datum({\n      type: \"LineString\",\n      coordinates: [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]]\n    }).attr(\"class\", \"equator\").attr(\"d\", path);\n    var country = g.selectAll(\".country\").data(countries);\n    country.enter().insert(\"path\").attr(\"class\", \"country\").attr(\"d\", path).attr(\"id\", function (d, i) {\n      return d.id;\n    }).attr(\"title\", function (d) {\n      return d.properties.name;\n    }).style(\"fill\", function (d) {\n      if (valueHash[d.properties.name]) {\n        var c = quantize(valueHash[d.properties.name]);\n        var color = colors[c].getColors();\n        return \"rgb(\" + color.r + \",\" + color.g + \",\" + color.b + \")\";\n      } else {\n        return \"#ccc\";\n      }\n    }).on(\"mousemove\", function (d) {\n      var html = \"\";\n      html += \"<div class=\\\"tooltip_kv\\\">\";\n      html += \"<span class=\\\"tooltip_key\\\">\";\n      html += d.properties.name;\n      html += \"</span>\";\n      html += \"<span class=\\\"tooltip_value\\\">\";\n      html += valueHash[d.properties.name] ? valueFormat(valueHash[d.properties.name]) : \"\";\n      html += \"\";\n      html += \"</span>\";\n      html += \"</div>\";\n      $(\"#tooltip-container\").html(html);\n      $(this).attr(\"fill-opacity\", \"0.8\");\n      $(\"#tooltip-container\").show();\n      var coordinates = d3.mouse(this);\n      var map_width = $('.choropleth')[0].getBoundingClientRect().width;\n\n      if (d3.event.pageX < map_width / 2) {\n        d3.select(\"#tooltip-container\").style(\"top\", d3.event.layerY + 15 + \"px\").style(\"left\", d3.event.layerX + 15 + \"px\");\n      } else {\n        var tooltip_width = $(\"#tooltip-container\").width();\n        d3.select(\"#tooltip-container\").style(\"top\", d3.event.layerY + 15 + \"px\").style(\"left\", d3.event.layerX - tooltip_width - 30 + \"px\");\n      }\n    }).on(\"mouseout\", function () {\n      $(this).attr(\"fill-opacity\", \"1.0\");\n      $(\"#tooltip-container\").hide();\n    });\n    g.append(\"path\").datum(topojson.mesh(world, world.objects.countries, function (a, b) {\n      return a !== b;\n    })).attr(\"class\", \"boundary\").attr(\"d\", path);\n    svg.attr(\"height\", config.height * 2.2 / 3);\n  });\n  d3.select(self.frameElement).style(\"height\", height * 2.3 / 3 + \"px\");\n});",{"version":3,"sources":["WorldMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"html\">\n  <div class=\"\">\n    <div id=\"tooltip-container\"></div>\n\n    <div id=\"canvas-svg\"></div>\n  </div>\n</template>\n\n\n<style>\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  width: 960px;\n  height: 500px;\n  position: relative;\n}\n#canvas {\n}\n#canvas-svg {\n}\n.land {\n  fill: #222;\n}\n.boundary {\n  fill: none;\n  stroke: #fff;\n  stroke-width: 1px;\n}\n#tooltip-container {\n  position: absolute;\n  background-color: #fff;\n  color: #000;\n  padding: 10px;\n  border: 1px solid;\n  display: none;\n}\n.tooltip_key {\n  font-weight: bold;\n}\n.tooltip_value {\n  margin-left: 20px;\n  float: right;\n}\n</style>\n\n\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.1.0/topojson.min.js\"></script>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n\n<script>\nd3.csv(\"population.csv\", function(err, data) {\n  var config = {\"data0\":\"Country (or dependent territory)\",\"data1\":\"Population\",\n              \"label0\":\"label 0\",\"label1\":\"label 1\",\"color0\":\"#99ccff\",\"color1\":\"#0050A1\",\n              \"width\":960,\"height\":960}\n\n  var width = config.width,\n      height = config.height;\n\n  var COLOR_COUNTS = 9;\n\n  function Interpolate(start, end, steps, count) {\n      var s = start,\n          e = end,\n          final = s + (((e - s) / steps) * count);\n      return Math.floor(final);\n  }\n\n  function Color(_r, _g, _b) {\n      var r, g, b;\n      var setColors = function(_r, _g, _b) {\n          r = _r;\n          g = _g;\n          b = _b;\n      };\n\n      setColors(_r, _g, _b);\n      this.getColors = function() {\n          var colors = {\n              r: r,\n              g: g,\n              b: b\n          };\n          return colors;\n      };\n  }\n\n  function hexToRgb(hex) {\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16)\n      } : null;\n  }\n\n  function valueFormat(d) {\n    if (d > 1000000000) {\n      return Math.round(d / 1000000000 * 10) / 10 + \"B\";\n    } else if (d > 1000000) {\n      return Math.round(d / 1000000 * 10) / 10 + \"M\";\n    } else if (d > 1000) {\n      return Math.round(d / 1000 * 10) / 10 + \"K\";\n    } else {\n      return d;\n    }\n  }\n\n  var COLOR_FIRST = config.color0, COLOR_LAST = config.color1;\n\n  var rgb = hexToRgb(COLOR_FIRST);\n\n  var COLOR_START = new Color(rgb.r, rgb.g, rgb.b);\n\n  rgb = hexToRgb(COLOR_LAST);\n  var COLOR_END = new Color(rgb.r, rgb.g, rgb.b);\n\n  var startColors = COLOR_START.getColors(),\n      endColors = COLOR_END.getColors();\n\n  var colors = [];\n\n  for (var i = 0; i < COLOR_COUNTS; i++) {\n    var r = Interpolate(startColors.r, endColors.r, COLOR_COUNTS, i);\n    var g = Interpolate(startColors.g, endColors.g, COLOR_COUNTS, i);\n    var b = Interpolate(startColors.b, endColors.b, COLOR_COUNTS, i);\n    colors.push(new Color(r, g, b));\n  }\n\n  var MAP_KEY = config.data0;\n  var MAP_VALUE = config.data1;\n\n  var projection = d3.geo.mercator()\n      .scale((width + 1) / 2 / Math.PI)\n      .translate([width / 2, height / 2])\n      .precision(.1);\n\n  var path = d3.geo.path()\n      .projection(projection);\n\n  var graticule = d3.geo.graticule();\n\n  var svg = d3.select(\"#canvas-svg\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n  svg.append(\"path\")\n      .datum(graticule)\n      .attr(\"class\", \"graticule\")\n      .attr(\"d\", path);\n\n  var valueHash = {};\n\n  function log10(val) {\n    return Math.log(val);\n  }\n\n  data.forEach(function(d) {\n    valueHash[d[MAP_KEY]] = +d[MAP_VALUE];\n  });\n\n  var quantize = d3.scale.quantize()\n      .domain([0, 1.0])\n      .range(d3.range(COLOR_COUNTS).map(function(i) { return i }));\n\n  quantize.domain([d3.min(data, function(d){\n      return (+d[MAP_VALUE]) }),\n    d3.max(data, function(d){\n      return (+d[MAP_VALUE]) })]);\n\n  d3.json(\"https://s3-us-west-2.amazonaws.com/vida-public/geo/world-topo-min.json\", function(error, world) {\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    svg.append(\"path\")\n       .datum(graticule)\n       .attr(\"class\", \"choropleth\")\n       .attr(\"d\", path);\n\n    var g = svg.append(\"g\");\n\n    g.append(\"path\")\n     .datum({type: \"LineString\", coordinates: [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]]})\n     .attr(\"class\", \"equator\")\n     .attr(\"d\", path);\n\n    var country = g.selectAll(\".country\").data(countries);\n\n    country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d,i) { return d.id; })\n        .attr(\"title\", function(d) { return d.properties.name; })\n        .style(\"fill\", function(d) {\n          if (valueHash[d.properties.name]) {\n            var c = quantize((valueHash[d.properties.name]));\n            var color = colors[c].getColors();\n            return \"rgb(\" + color.r + \",\" + color.g +\n                \",\" + color.b + \")\";\n          } else {\n            return \"#ccc\";\n          }\n        })\n        .on(\"mousemove\", function(d) {\n            var html = \"\";\n\n            html += \"<div class=\\\"tooltip_kv\\\">\";\n            html += \"<span class=\\\"tooltip_key\\\">\";\n            html += d.properties.name;\n            html += \"</span>\";\n            html += \"<span class=\\\"tooltip_value\\\">\";\n            html += (valueHash[d.properties.name] ? valueFormat(valueHash[d.properties.name]) : \"\");\n            html += \"\";\n            html += \"</span>\";\n            html += \"</div>\";\n\n            $(\"#tooltip-container\").html(html);\n            $(this).attr(\"fill-opacity\", \"0.8\");\n            $(\"#tooltip-container\").show();\n\n            var coordinates = d3.mouse(this);\n\n            var map_width = $('.choropleth')[0].getBoundingClientRect().width;\n\n            if (d3.event.pageX < map_width / 2) {\n              d3.select(\"#tooltip-container\")\n                .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                .style(\"left\", (d3.event.layerX + 15) + \"px\");\n            } else {\n              var tooltip_width = $(\"#tooltip-container\").width();\n              d3.select(\"#tooltip-container\")\n                .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                .style(\"left\", (d3.event.layerX - tooltip_width - 30) + \"px\");\n            }\n        })\n        .on(\"mouseout\", function() {\n                $(this).attr(\"fill-opacity\", \"1.0\");\n                $(\"#tooltip-container\").hide();\n            });\n\n    g.append(\"path\")\n        .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))\n        .attr(\"class\", \"boundary\")\n        .attr(\"d\", path);\n\n    svg.attr(\"height\", config.height * 2.2 / 3);\n  });\n\n  d3.select(self.frameElement).style(\"height\", (height * 2.3 / 3) + \"px\");\n});\n</script>\n"],"sourceRoot":"src/components"}]}