{"remainingRequest":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/albert/Desktop/AirMashup_GSoC/web/src/components/WorldMap.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/src/components/WorldMap.vue","mtime":1565267952964},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/albert/Desktop/AirMashup_GSoC/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  width: 960px;\n  height: 500px;\n  position: relative;\n}\n#canvas {\n}\n#canvas-svg {\n}\n.land {\n  fill: #222;\n}\n.boundary {\n  fill: none;\n  stroke: #fff;\n  stroke-width: 1px;\n}\n#tooltip-container {\n  position: absolute;\n  background-color: #fff;\n  color: #000;\n  padding: 10px;\n  border: 1px solid;\n  display: none;\n}\n.tooltip_key {\n  font-weight: bold;\n}\n.tooltip_value {\n  margin-left: 20px;\n  float: right;\n}\n",{"version":3,"sources":["WorldMap.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WorldMap.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\n  <div class=\"\">\n    <div id=\"tooltip-container\"></div>\n\n    <div id=\"canvas-svg\"></div>\n  </div>\n</template>\n\n\n<style>\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  width: 960px;\n  height: 500px;\n  position: relative;\n}\n#canvas {\n}\n#canvas-svg {\n}\n.land {\n  fill: #222;\n}\n.boundary {\n  fill: none;\n  stroke: #fff;\n  stroke-width: 1px;\n}\n#tooltip-container {\n  position: absolute;\n  background-color: #fff;\n  color: #000;\n  padding: 10px;\n  border: 1px solid;\n  display: none;\n}\n.tooltip_key {\n  font-weight: bold;\n}\n.tooltip_value {\n  margin-left: 20px;\n  float: right;\n}\n</style>\n\n\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.1.0/topojson.min.js\"></script>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n\n<script>\nd3.csv(\"population.csv\", function(err, data) {\n  var config = {\"data0\":\"Country (or dependent territory)\",\"data1\":\"Population\",\n              \"label0\":\"label 0\",\"label1\":\"label 1\",\"color0\":\"#99ccff\",\"color1\":\"#0050A1\",\n              \"width\":960,\"height\":960}\n\n  var width = config.width,\n      height = config.height;\n\n  var COLOR_COUNTS = 9;\n\n  function Interpolate(start, end, steps, count) {\n      var s = start,\n          e = end,\n          final = s + (((e - s) / steps) * count);\n      return Math.floor(final);\n  }\n\n  function Color(_r, _g, _b) {\n      var r, g, b;\n      var setColors = function(_r, _g, _b) {\n          r = _r;\n          g = _g;\n          b = _b;\n      };\n\n      setColors(_r, _g, _b);\n      this.getColors = function() {\n          var colors = {\n              r: r,\n              g: g,\n              b: b\n          };\n          return colors;\n      };\n  }\n\n  function hexToRgb(hex) {\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16)\n      } : null;\n  }\n\n  function valueFormat(d) {\n    if (d > 1000000000) {\n      return Math.round(d / 1000000000 * 10) / 10 + \"B\";\n    } else if (d > 1000000) {\n      return Math.round(d / 1000000 * 10) / 10 + \"M\";\n    } else if (d > 1000) {\n      return Math.round(d / 1000 * 10) / 10 + \"K\";\n    } else {\n      return d;\n    }\n  }\n\n  var COLOR_FIRST = config.color0, COLOR_LAST = config.color1;\n\n  var rgb = hexToRgb(COLOR_FIRST);\n\n  var COLOR_START = new Color(rgb.r, rgb.g, rgb.b);\n\n  rgb = hexToRgb(COLOR_LAST);\n  var COLOR_END = new Color(rgb.r, rgb.g, rgb.b);\n\n  var startColors = COLOR_START.getColors(),\n      endColors = COLOR_END.getColors();\n\n  var colors = [];\n\n  for (var i = 0; i < COLOR_COUNTS; i++) {\n    var r = Interpolate(startColors.r, endColors.r, COLOR_COUNTS, i);\n    var g = Interpolate(startColors.g, endColors.g, COLOR_COUNTS, i);\n    var b = Interpolate(startColors.b, endColors.b, COLOR_COUNTS, i);\n    colors.push(new Color(r, g, b));\n  }\n\n  var MAP_KEY = config.data0;\n  var MAP_VALUE = config.data1;\n\n  var projection = d3.geo.mercator()\n      .scale((width + 1) / 2 / Math.PI)\n      .translate([width / 2, height / 2])\n      .precision(.1);\n\n  var path = d3.geo.path()\n      .projection(projection);\n\n  var graticule = d3.geo.graticule();\n\n  var svg = d3.select(\"#canvas-svg\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n  svg.append(\"path\")\n      .datum(graticule)\n      .attr(\"class\", \"graticule\")\n      .attr(\"d\", path);\n\n  var valueHash = {};\n\n  function log10(val) {\n    return Math.log(val);\n  }\n\n  data.forEach(function(d) {\n    valueHash[d[MAP_KEY]] = +d[MAP_VALUE];\n  });\n\n  var quantize = d3.scale.quantize()\n      .domain([0, 1.0])\n      .range(d3.range(COLOR_COUNTS).map(function(i) { return i }));\n\n  quantize.domain([d3.min(data, function(d){\n      return (+d[MAP_VALUE]) }),\n    d3.max(data, function(d){\n      return (+d[MAP_VALUE]) })]);\n\n  d3.json(\"https://s3-us-west-2.amazonaws.com/vida-public/geo/world-topo-min.json\", function(error, world) {\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    svg.append(\"path\")\n       .datum(graticule)\n       .attr(\"class\", \"choropleth\")\n       .attr(\"d\", path);\n\n    var g = svg.append(\"g\");\n\n    g.append(\"path\")\n     .datum({type: \"LineString\", coordinates: [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]]})\n     .attr(\"class\", \"equator\")\n     .attr(\"d\", path);\n\n    var country = g.selectAll(\".country\").data(countries);\n\n    country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d,i) { return d.id; })\n        .attr(\"title\", function(d) { return d.properties.name; })\n        .style(\"fill\", function(d) {\n          if (valueHash[d.properties.name]) {\n            var c = quantize((valueHash[d.properties.name]));\n            var color = colors[c].getColors();\n            return \"rgb(\" + color.r + \",\" + color.g +\n                \",\" + color.b + \")\";\n          } else {\n            return \"#ccc\";\n          }\n        })\n        .on(\"mousemove\", function(d) {\n            var html = \"\";\n\n            html += \"<div class=\\\"tooltip_kv\\\">\";\n            html += \"<span class=\\\"tooltip_key\\\">\";\n            html += d.properties.name;\n            html += \"</span>\";\n            html += \"<span class=\\\"tooltip_value\\\">\";\n            html += (valueHash[d.properties.name] ? valueFormat(valueHash[d.properties.name]) : \"\");\n            html += \"\";\n            html += \"</span>\";\n            html += \"</div>\";\n\n            $(\"#tooltip-container\").html(html);\n            $(this).attr(\"fill-opacity\", \"0.8\");\n            $(\"#tooltip-container\").show();\n\n            var coordinates = d3.mouse(this);\n\n            var map_width = $('.choropleth')[0].getBoundingClientRect().width;\n\n            if (d3.event.pageX < map_width / 2) {\n              d3.select(\"#tooltip-container\")\n                .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                .style(\"left\", (d3.event.layerX + 15) + \"px\");\n            } else {\n              var tooltip_width = $(\"#tooltip-container\").width();\n              d3.select(\"#tooltip-container\")\n                .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                .style(\"left\", (d3.event.layerX - tooltip_width - 30) + \"px\");\n            }\n        })\n        .on(\"mouseout\", function() {\n                $(this).attr(\"fill-opacity\", \"1.0\");\n                $(\"#tooltip-container\").hide();\n            });\n\n    g.append(\"path\")\n        .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))\n        .attr(\"class\", \"boundary\")\n        .attr(\"d\", path);\n\n    svg.attr(\"height\", config.height * 2.2 / 3);\n  });\n\n  d3.select(self.frameElement).style(\"height\", (height * 2.3 / 3) + \"px\");\n});\n</script>\n"]}]}